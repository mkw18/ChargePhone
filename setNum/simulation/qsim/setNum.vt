// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/09/2019 20:05:09"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    setNum
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module setNum_vlg_sample_tst(
	C,
	R,
	startSet,
	sampler_tx
);
input [3:0] C;
input [3:0] R;
input  startSet;
output sampler_tx;

reg sample;
time current_time;
always @(C or R or startSet)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module setNum_vlg_check_tst (
	clear,
	enter,
	num,
	start,
	sampler_rx
);
input  clear;
input  enter;
input [4:0] num;
input  start;
input sampler_rx;

reg  clear_expected;
reg  enter_expected;
reg [4:0] num_expected;
reg  start_expected;

reg  clear_prev;
reg  enter_prev;
reg [4:0] num_prev;
reg  start_prev;

reg  clear_expected_prev;
reg  enter_expected_prev;
reg [4:0] num_expected_prev;
reg  start_expected_prev;

reg  last_clear_exp;
reg  last_enter_exp;
reg [4:0] last_num_exp;
reg  last_start_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:4] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 4'b1;
end

// update real /o prevs

always @(trigger)
begin
	clear_prev = clear;
	enter_prev = enter;
	num_prev = num;
	start_prev = start;
end

// update expected /o prevs

always @(trigger)
begin
	clear_expected_prev = clear_expected;
	enter_expected_prev = enter_expected;
	num_expected_prev = num_expected;
	start_expected_prev = start_expected;
end



// expected clear
initial
begin
	clear_expected = 1'bX;
end 

// expected enter
initial
begin
	enter_expected = 1'bX;
end 
// expected num[ 4 ]
initial
begin
	num_expected[4] = 1'bX;
end 
// expected num[ 3 ]
initial
begin
	num_expected[3] = 1'bX;
end 
// expected num[ 2 ]
initial
begin
	num_expected[2] = 1'bX;
end 
// expected num[ 1 ]
initial
begin
	num_expected[1] = 1'bX;
end 
// expected num[ 0 ]
initial
begin
	num_expected[0] = 1'bX;
end 

// expected start
initial
begin
	start_expected = 1'bX;
end 
// generate trigger
always @(clear_expected or clear or enter_expected or enter or num_expected or num or start_expected or start)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected clear = %b | expected enter = %b | expected num = %b | expected start = %b | ",clear_expected_prev,enter_expected_prev,num_expected_prev,start_expected_prev);
	$display("| real clear = %b | real enter = %b | real num = %b | real start = %b | ",clear_prev,enter_prev,num_prev,start_prev);
`endif
	if (
		( clear_expected_prev !== 1'bx ) && ( clear_prev !== clear_expected_prev )
		&& ((clear_expected_prev !== last_clear_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port clear :: @time = %t",  $realtime);
		$display ("     Expected value = %b", clear_expected_prev);
		$display ("     Real value = %b", clear_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_clear_exp = clear_expected_prev;
	end
	if (
		( enter_expected_prev !== 1'bx ) && ( enter_prev !== enter_expected_prev )
		&& ((enter_expected_prev !== last_enter_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port enter :: @time = %t",  $realtime);
		$display ("     Expected value = %b", enter_expected_prev);
		$display ("     Real value = %b", enter_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_enter_exp = enter_expected_prev;
	end
	if (
		( num_expected_prev[0] !== 1'bx ) && ( num_prev[0] !== num_expected_prev[0] )
		&& ((num_expected_prev[0] !== last_num_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port num[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", num_expected_prev);
		$display ("     Real value = %b", num_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_num_exp[0] = num_expected_prev[0];
	end
	if (
		( num_expected_prev[1] !== 1'bx ) && ( num_prev[1] !== num_expected_prev[1] )
		&& ((num_expected_prev[1] !== last_num_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port num[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", num_expected_prev);
		$display ("     Real value = %b", num_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_num_exp[1] = num_expected_prev[1];
	end
	if (
		( num_expected_prev[2] !== 1'bx ) && ( num_prev[2] !== num_expected_prev[2] )
		&& ((num_expected_prev[2] !== last_num_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port num[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", num_expected_prev);
		$display ("     Real value = %b", num_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_num_exp[2] = num_expected_prev[2];
	end
	if (
		( num_expected_prev[3] !== 1'bx ) && ( num_prev[3] !== num_expected_prev[3] )
		&& ((num_expected_prev[3] !== last_num_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port num[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", num_expected_prev);
		$display ("     Real value = %b", num_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_num_exp[3] = num_expected_prev[3];
	end
	if (
		( num_expected_prev[4] !== 1'bx ) && ( num_prev[4] !== num_expected_prev[4] )
		&& ((num_expected_prev[4] !== last_num_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port num[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", num_expected_prev);
		$display ("     Real value = %b", num_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_num_exp[4] = num_expected_prev[4];
	end
	if (
		( start_expected_prev !== 1'bx ) && ( start_prev !== start_expected_prev )
		&& ((start_expected_prev !== last_start_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port start :: @time = %t",  $realtime);
		$display ("     Expected value = %b", start_expected_prev);
		$display ("     Real value = %b", start_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_start_exp = start_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module setNum_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [3:0] C;
reg [3:0] R;
reg startSet;
// wires                                               
wire clear;
wire enter;
wire [4:0] num;
wire start;

wire sampler;                             

// assign statements (if any)                          
setNum i1 (
// port map - connection between master ports and signals/registers   
	.C(C),
	.R(R),
	.clear(clear),
	.enter(enter),
	.num(num),
	.start(start),
	.startSet(startSet)
);

// startSet
always
begin
	startSet = 1'b0;
	startSet = #10000 1'b1;
	#10000;
end 
// C[ 3 ]
initial
begin
	C[3] = 1'b1;
	C[3] = #150000 1'b0;
	C[3] = #180000 1'b1;
	C[3] = #610000 1'b0;
end 
// C[ 2 ]
initial
begin
	C[2] = 1'b1;
	C[2] = #330000 1'b0;
	C[2] = #200000 1'b1;
	C[2] = #410000 1'b0;
end 
// C[ 1 ]
initial
begin
	C[1] = 1'b1;
	C[1] = #530000 1'b0;
	C[1] = #190000 1'b1;
	C[1] = #220000 1'b0;
end 
// C[ 0 ]
initial
begin
	C[0] = 1'b1;
	C[0] = #720000 1'b0;
end 
// R[ 3 ]
initial
begin
	R[3] = 1'b0;
	R[3] = #40000 1'b1;
	R[3] = #120000 1'b0;
	R[3] = #40000 1'b1;
	R[3] = #120000 1'b0;
	R[3] = #40000 1'b1;
	R[3] = #120000 1'b0;
	R[3] = #40000 1'b1;
	R[3] = #120000 1'b0;
	R[3] = #40000 1'b1;
	R[3] = #120000 1'b0;
	R[3] = #40000 1'b1;
end 
// R[ 2 ]
initial
begin
	R[2] = 1'b1;
	R[2] = #40000 1'b0;
	R[2] = #40000 1'b1;
	R[2] = #120000 1'b0;
	R[2] = #40000 1'b1;
	R[2] = #120000 1'b0;
	R[2] = #40000 1'b1;
	R[2] = #120000 1'b0;
	R[2] = #40000 1'b1;
	R[2] = #120000 1'b0;
	R[2] = #40000 1'b1;
	R[2] = #120000 1'b0;
	R[2] = #40000 1'b1;
end 
// R[ 1 ]
initial
begin
	R[1] = 1'b1;
	R[1] = #80000 1'b0;
	R[1] = #40000 1'b1;
	R[1] = #120000 1'b0;
	R[1] = #40000 1'b1;
	R[1] = #120000 1'b0;
	R[1] = #40000 1'b1;
	R[1] = #120000 1'b0;
	R[1] = #40000 1'b1;
	R[1] = #120000 1'b0;
	R[1] = #40000 1'b1;
	R[1] = #120000 1'b0;
	R[1] = #40000 1'b1;
end 
// R[ 0 ]
initial
begin
	R[0] = 1'b1;
	R[0] = #120000 1'b0;
	R[0] = #40000 1'b1;
	R[0] = #120000 1'b0;
	R[0] = #40000 1'b1;
	R[0] = #120000 1'b0;
	R[0] = #40000 1'b1;
	R[0] = #120000 1'b0;
	R[0] = #40000 1'b1;
	R[0] = #120000 1'b0;
	R[0] = #40000 1'b1;
	R[0] = #120000 1'b0;
	R[0] = #40000 1'b1;
end 

setNum_vlg_sample_tst tb_sample (
	.C(C),
	.R(R),
	.startSet(startSet),
	.sampler_tx(sampler)
);

setNum_vlg_check_tst tb_out(
	.clear(clear),
	.enter(enter),
	.num(num),
	.start(start),
	.sampler_rx(sampler)
);
endmodule

